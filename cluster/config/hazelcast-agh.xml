<?xml version="1.0" encoding="UTF-8"?>
<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-config-3.8.xsd"
           xmlns="http://www.hazelcast.com/schema/config"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <group>
        <name>kpts-cluster</name>
        <password>kpts-cluster-pass</password>
    </group>

    <management-center enabled="true">http://node2.a2s.agh.edu.pl:8080/mancenter</management-center>

    <partition-group enabled="false"/>

    <executor-service name="default">
        <pool-size>10</pool-size>
        <!--Queue capacity. 0 means Integer.MAX_VALUE.-->
        <queue-capacity>0</queue-capacity>
    </executor-service>

    <map name="commons">

        <in-memory-format>OBJECT</in-memory-format>

        <backup-count>0</backup-count>
        <async-backup-count>0</async-backup-count>

        <near-cache>
            <!--
              Maximum size of the near cache. When max size is reached,
              cache is evicted based on the policy defined.
              Any integer between 0 and Integer.MAX_VALUE. 0 means
              Integer.MAX_VALUE. Default is 0.
            -->
            <max-size>0</max-size>

            <!--
              Maximum number of seconds for each entry to stay in the near cache. Entries that are
              older than <time-to-live-seconds> will get automatically evicted from the near cache.
              Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
            -->
            <time-to-live-seconds>0</time-to-live-seconds>

            <!--
              Maximum number of seconds each entry can stay in the near cache as untouched (not-read).
              Entries that are not read (touched) more than <max-idle-seconds> value will get removed
              from the near cache.
              Any integer between 0 and Integer.MAX_VALUE. 0 means
              Integer.MAX_VALUE. Default is 0.
            -->
            <max-idle-seconds>0</max-idle-seconds>

            <!--
              Valid values are:
              NONE (no extra eviction, <time-to-live-seconds> may still apply),
              LRU  (Least Recently Used),
              LFU  (Least Frequently Used).
              NONE is the default.
              Regardless of the eviction policy used, <time-to-live-seconds> will still apply.
            -->
            <eviction-policy>NONE</eviction-policy>

            <!--
              Should the cached entries get evicted if the entries are changed (updated or removed).
              true of false. Default is true.
            -->
            <invalidate-on-change>true</invalidate-on-change>

            <!--
              You may want also local entries to be cached.
              This is useful when in memory format for near cache is different than the map's one.
              By default it is disabled.
            -->
            <cache-local-entries>false</cache-local-entries>
        </near-cache>
    </map>


    <map name="vertices">
        <!--
           Data type that will be used for storing recordMap.
           Possible values:
           BINARY (default): keys and values will be stored as binary data
           OBJECT : values will be stored in their object forms
           NATIVE : values will be stored in non-heap region of JVM
        -->
        <in-memory-format>BINARY</in-memory-format>

        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. 0 means no backup.
        -->
        <backup-count>0</backup-count>
        <!--
            Number of async backups. 0 means no backup.
        -->
        <async-backup-count>0</async-backup-count>
        <!--
			Maximum number of seconds for each entry to stay in the map. Entries that are
			older than <time-to-live-seconds> and not updated for <time-to-live-seconds>
			will get automatically evicted from the map.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
        <time-to-live-seconds>0</time-to-live-seconds>
        <!--
			Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
		-->
        <max-idle-seconds>0</max-idle-seconds>
        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            NONE is the default.
        -->
        <eviction-policy>NONE</eviction-policy>
        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size policy="PER_NODE">0</max-size>
        <!--
            `eviction-percentage` property is deprecated and will be ignored when it is set.

            As of version 3.7, eviction mechanism changed.
            It uses a probabilistic algorithm based on sampling. Please see documentation for further details
        -->
        <eviction-percentage>25</eviction-percentage>
        <!--
            `min-eviction-check-millis` property is deprecated  and will be ignored when it is set.

            As of version 3.7, eviction mechanism changed.
            It uses a probabilistic algorithm based on sampling. Please see documentation for further details
        -->
        <min-eviction-check-millis>100</min-eviction-check-millis>
        <!--
            While recovering from split-brain (network partitioning),
            map entries in the small cluster will merge into the bigger cluster
            based on the policy set here. When an entry merge into the
            cluster, there might an existing entry with the same key already.
            Values of these entries might be different for that same key.
            Which value should be set for the key? Conflict is resolved by
            the policy set here. Default policy is PutIfAbsentMapMergePolicy

            There are built-in merge policies such as
            com.hazelcast.map.merge.PassThroughMergePolicy; entry will be overwritten if merging entry exists for the key.
            com.hazelcast.map.merge.PutIfAbsentMapMergePolicy ; entry will be added if the merging entry doesn't exist in the cluster.
            com.hazelcast.map.merge.HigherHitsMapMergePolicy ; entry with the higher hits wins.
            com.hazelcast.map.merge.LatestUpdateMapMergePolicy ; entry with the latest update wins.
        -->
        <merge-policy>com.hazelcast.map.merge.PutIfAbsentMapMergePolicy</merge-policy>

        <!--
           Control caching of de-serialized values. Caching makes query evaluation faster, but it cost memory.
           Possible Values:
                        NEVER: Never cache deserialized object
                        INDEX-ONLY: Caches values only when they are inserted into an index.
                        ALWAYS: Always cache deserialized values.
        -->
        <cache-deserialized-values>ALWAYS</cache-deserialized-values>

    </map>

    <serialization>
        <data-serializable-factories>
            <data-serializable-factory factory-id="1">
                com.agh.iet.komplastech.solver.factories.HazelcastProductionFactory
            </data-serializable-factory>
            <data-serializable-factory factory-id="2">
                com.agh.iet.komplastech.solver.factories.HazelcastGeneralFactory
            </data-serializable-factory>
            <data-serializable-factory factory-id="3">
                com.agh.iet.komplastech.solver.factories.HazelcastProblemFactory
            </data-serializable-factory>
        </data-serializable-factories>
    </serialization>

    <services enable-defaults="true"/>

    <lite-member enabled="false"/>

</hazelcast>